using dotnet_cyberpunk_challenge_2._5.malware_daemons.lib;

namespace dotnet_cyberpunk_challenge_2._5.malware_daemons
{
    

    public abstract class KuangDaemonFamilyBase
    {
        protected bool IsConnectionTunnelProtected {get;set;}
        protected bool IsConnectionProxyEnabled {get;set;}
        public ArasakaServerConnection CurrentServerConnection {get;set;}
        public IceBreakerTunnelConnection CurrentIceBreakerTunnelConnection {get;set;}



        public abstract Task SetupIceBreakerTunnelToTarget(); // Setup the connection tunnel between host and target

        public abstract Task<ArasakaMessageRoot> GetIceTypeOnRemote(); // Students need to Get type of ICE on target

        public abstract void IceBreak(); // Students need to Attempt to Break the ICE



        public async virtual Task<ArasakaServerConnection> GetCurrentArasakaConnection() {
            try {
                if (CurrentServerConnection != null) {
                    return CurrentServerConnection;
                } else {
                    throw new Exception("Not Currently connected to an Arasaka Server! Hope your synapses aren't burnt out.");
                }
            } catch {
                CurrentServerConnection = _EstablishConnectionToArasakaTargetServer();
                await CurrentServerConnection.Initialize();
                return CurrentServerConnection;
            }
        }



        protected virtual bool _IsTargetHatichiICE(string retrievedModelType){
            return KnownIceTypes.HITACHI == retrievedModelType;
        }

        protected virtual bool _IsTargetHosakaICE(string retrievedModelType){
            return KnownIceTypes.HOSAKA == retrievedModelType;
        }

        protected virtual bool _IsTargetKiroshiICE(string retrievedModelType){
            return KnownIceTypes.KIROSHI == retrievedModelType;
        }

        protected virtual ArasakaServerConnection _EstablishConnectionToArasakaTargetServer() {
            return new ArasakaServerConnection();
        }

        protected async virtual Task<IceBreakerTunnelConnection> _EncryptArasakaConnection() {
            IceBreakerTunnelConnection tunnel = new IceBreakerTunnelConnection();
            await tunnel.Initialize();
            IsConnectionTunnelProtected = tunnel.IsEncrypted == true && tunnel.TunnelEncryption == EncryptionType.SSL;
            IsConnectionProxyEnabled = tunnel.IsEncrypted;
            return tunnel;
        }
    }
}